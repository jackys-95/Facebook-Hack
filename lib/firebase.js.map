{"version":3,"sources":["../scripts/firebase.js"],"names":[],"mappings":"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","file":"firebase.js","sourcesContent":["/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nwindow.friendlyPix = window.friendlyPix || {};\n\n/**\n * Handles all Firebase interactions.\n */\nfriendlyPix.Firebase = class {\n  /**\n   * Number of posts loaded initially and per page for the feeds.\n   * @return {number}\n   */\n  static get POSTS_PAGE_SIZE() {\n    return 5;\n  }\n\n  /**\n   * Number of posts loaded initially and per page for the User Profile page.\n   * @return {number}\n   */\n  static get USER_PAGE_POSTS_PAGE_SIZE() {\n    return 6;\n  }\n\n  /**\n   * Number of posts comments loaded initially and per page.\n   * @return {number}\n   */\n  static get COMMENTS_PAGE_SIZE() {\n    return 3;\n  }\n\n  /**\n   * Initializes this Firebase facade.\n   * @constructor\n   */\n  constructor() {\n    // Firebase SDK.\n    this.database = firebase.database();\n    this.storage = firebase.storage();\n    this.auth = firebase.auth();\n\n    // Firebase references that are listened to.\n    this.firebaseRefs = [];\n  }\n\n  /**\n   * Turns off all Firebase listeners.\n   */\n  cancelAllSubscriptions() {\n    this.firebaseRefs.forEach(ref => ref.off());\n    this.firebaseRefs = [];\n  }\n\n  /**\n   * Subscribes to receive updates from a post's comments. The given `callback` function gets\n   * called for each new comment to the post with ID `postId`.\n   *\n   * If provided we'll only listen to comments that were posted after `latestCommentId`.\n   */\n  subscribeToComments(postId, callback, latestCommentId) {\n    return this._subscribeToFeed(`/comments/${postId}`, callback, latestCommentId, false);\n  }\n\n  /**\n   * Paginates comments from the post with ID `postId`.\n   *\n   * Fetches a page of `COMMENTS_PAGE_SIZE` comments from the post.\n   *\n   * We return a `Promise` which resolves with an Map of comments and a function to the next page or\n   * `null` if there is no next page.\n   */\n  getComments(postId) {\n    return this._getPaginatedFeed(`/comments/${postId}`,\n        friendlyPix.Firebase.COMMENTS_PAGE_SIZE, null, false);\n  }\n\n  /**\n   * Subscribes to receive updates to the general posts feed. The given `callback` function gets\n   * called for each new post to the general post feed.\n   *\n   * If provided we'll only listen to posts that were posted after `latestPostId`.\n   */\n  subscribeToGeneralFeed(callback, latestPostId) {\n    return this._subscribeToFeed('/posts/', callback, latestPostId);\n  }\n\n  /**\n   * Paginates posts from the global post feed.\n   *\n   * Fetches a page of `POSTS_PAGE_SIZE` posts from the global feed.\n   *\n   * We return a `Promise` which resolves with an Map of posts and a function to the next page or\n   * `null` if there is no next page.\n   */\n  getPosts() {\n    return this._getPaginatedFeed('/posts/', friendlyPix.Firebase.POSTS_PAGE_SIZE);\n  }\n\n  /**\n   * Subscribes to receive updates to the home feed. The given `callback` function gets called for\n   * each new post to the general post feed.\n   *\n   * If provided we'll only listen to posts that were posted after `latestPostId`.\n   */\n  subscribeToHomeFeed(callback, latestPostId) {\n    return this._subscribeToFeed(`/feed/${this.auth.currentUser.uid}`, callback, latestPostId,\n        true);\n  }\n\n  /**\n   * Paginates posts from the user's home feed.\n   *\n   * Fetches a page of `POSTS_PAGE_SIZE` posts from the user's home feed.\n   *\n   * We return a `Promise` which resolves with an Map of posts and a function to the next page or\n   * `null` if there is no next page.\n   */\n  getHomeFeedPosts() {\n    return this._getPaginatedFeed(`/feed/${this.auth.currentUser.uid}`,\n        friendlyPix.Firebase.POSTS_PAGE_SIZE, null, true);\n  }\n\n  /**\n   * Subscribes to receive updates to the home feed. The given `callback` function gets called for\n   * each new post to the general post feed.\n   *\n   * If provided we'll only listen to posts that were posted after `latestPostId`.\n   */\n  subscribeToUserFeed(uid, callback, latestPostId) {\n    return this._subscribeToFeed(`/people/${uid}/posts`, callback,\n        latestPostId, true);\n  }\n\n  /**\n   * Paginates posts from the user's posts feed.\n   *\n   * Fetches a page of `USER_PAGE_POSTS_PAGE_SIZE` posts from the user's posts feed.\n   *\n   * We return a `Promise` which resolves with an Map of posts and a function to the next page or\n   * `null` if there is no next page.\n   */\n  getUserFeedPosts(uid) {\n    return this._getPaginatedFeed(`/people/${uid}/posts`,\n        friendlyPix.Firebase.USER_PAGE_POSTS_PAGE_SIZE, null, true);\n  }\n\n  /**\n   * Subscribes to receive updates to the given feed. The given `callback` function gets called\n   * for each new entry on the given feed.\n   *\n   * If provided we'll only listen to entries that were posted after `latestEntryId`. This allows to\n   * listen only for new feed entries after fetching existing entries using `_getPaginatedFeed()`.\n   *\n   * If needed the posts details can be fetched. This is useful for shallow post feeds.\n   * @private\n   */\n  _subscribeToFeed(uri, callback, latestEntryId = null, fetchPostDetails = false) {\n    // Load all posts information.\n    let feedRef = this.database.ref(uri);\n    if (latestEntryId) {\n      feedRef = feedRef.orderByKey().startAt(latestEntryId);\n    }\n    feedRef.on('child_added', feedData => {\n      if (feedData.key !== latestEntryId) {\n        if (!fetchPostDetails) {\n          callback(feedData.key, feedData.val());\n        } else {\n          this.database.ref(`/posts/${feedData.key}`).once('value').then(\n              postData => callback(postData.key, postData.val()));\n        }\n      }\n    });\n    this.firebaseRefs.push(feedRef);\n  }\n\n  /**\n   * Paginates entries from the given feed.\n   *\n   * Fetches a page of `pageSize` entries from the given feed.\n   *\n   * If provided we'll return entries that were posted before (and including) `earliestEntryId`.\n   *\n   * We return a `Promise` which resolves with an Map of entries and a function to the next page or\n   * `null` if there is no next page.\n   *\n   * If needed the posts details can be fetched. This is useful for shallow post feeds like the user\n   * home feed and the user post feed.\n   * @private\n   */\n  _getPaginatedFeed(uri, pageSize, earliestEntryId = null, fetchPostDetails = false) {\n    console.log('Fetching entries from', uri, 'start at', earliestEntryId, 'page size', pageSize);\n    let ref = this.database.ref(uri);\n    if (earliestEntryId) {\n      ref = ref.orderByKey().endAt(earliestEntryId);\n    }\n    // We're fetching an additional item as a cheap way to test if there is a next page.\n    return ref.limitToLast(pageSize + 1).once('value').then(data => {\n      const entries = data.val() || {};\n\n      // Figure out if there is a next page.\n      let nextPage = null;\n      const entryIds = Object.keys(entries);\n      if (entryIds.length > pageSize) {\n        delete entries[entryIds[0]];\n        const nextPageStartingId = entryIds.shift();\n        nextPage = () => this._getPaginatedFeed(\n            uri, pageSize, nextPageStartingId, fetchPostDetails);\n      }\n      if (fetchPostDetails) {\n        // Fetch details of all posts.\n        const queries = entryIds.map(postId => this.getPostData(postId));\n        // Since all the requests are being done one the same feed it's unlikely that a single one\n        // would fail and not the others so using Promise.all() is not so risky.\n        return Promise.all(queries).then(results => {\n          const deleteOps = [];\n          results.forEach(result => {\n            if (result.val()) {\n              entries[result.key] = result.val();\n            } else {\n              // We encountered a deleted post. Removing permanently from the feed.\n              delete entries[result.key];\n              deleteOps.push(this.deleteFromFeed(uri, result.key));\n            }\n          });\n          if (deleteOps.length > 0) {\n            // We had to remove some deleted posts from the feed. Lets run the query again to get\n            // the correct number of posts.\n            return this._getPaginatedFeed(uri, pageSize, earliestEntryId, fetchPostDetails);\n          }\n          return {entries: entries, nextPage: nextPage};\n        });\n      }\n      return {entries: entries, nextPage: nextPage};\n    });\n  }\n\n  /**\n   * Keeps the home feed populated with latest followed users' posts live.\n   */\n  startHomeFeedLiveUpdaters() {\n    // Make sure we listen on each followed people's posts.\n    const followingRef = this.database.ref(`/people/${this.auth.currentUser.uid}/following`);\n    this.firebaseRefs.push(followingRef);\n    followingRef.on('child_added', followingData => {\n      // Start listening the followed user's posts to populate the home feed.\n      const followedUid = followingData.key;\n      let followedUserPostsRef = this.database.ref(`/people/${followedUid}/posts`);\n      if (followingData.val() instanceof String) {\n        followedUserPostsRef = followedUserPostsRef.orderByKey().startAt(followingData.val());\n      }\n      this.firebaseRefs.push(followedUserPostsRef);\n      followedUserPostsRef.on('child_added', postData => {\n        if (postData.key !== followingData.val()) {\n          const updates = {};\n          updates[`/feed/${this.auth.currentUser.uid}/${postData.key}`] = true;\n          updates[`/people/${this.auth.currentUser.uid}/following/${followedUid}`] = postData.key;\n          this.database.ref().update(updates);\n        }\n      });\n    });\n    // Stop listening to users we unfollow.\n    followingRef.on('child_removed', followingData => {\n      // Stop listening the followed user's posts to populate the home feed.\n      const followedUserId = followingData.key;\n      this.database.ref(`/people/${followedUserId}/posts`).off();\n    });\n  }\n\n  /**\n   * Updates the home feed with new followed users' posts and returns a promise once that's done.\n   */\n  updateHomeFeeds() {\n    // Make sure we listen on each followed people's posts.\n    const followingRef = this.database.ref(`/people/${this.auth.currentUser.uid}/following`);\n    return followingRef.once('value', followingData => {\n      // Start listening the followed user's posts to populate the home feed.\n      const following = followingData.val();\n      if (!following) {\n        return;\n      }\n      const updateOperations = Object.keys(following).map(followedUid => {\n        let followedUserPostsRef = this.database.ref(`/people/${followedUid}/posts`);\n        const lastSyncedPostId = following[followedUid];\n        if (lastSyncedPostId instanceof String) {\n          followedUserPostsRef = followedUserPostsRef.orderByKey().startAt(lastSyncedPostId);\n        }\n        return followedUserPostsRef.once('value', postData => {\n          const updates = {};\n          if (!postData.val()) {\n            return;\n          }\n          Object.keys(postData.val()).forEach(postId => {\n            if (postId !== lastSyncedPostId) {\n              updates[`/feed/${this.auth.currentUser.uid}/${postId}`] = true;\n              updates[`/people/${this.auth.currentUser.uid}/following/${followedUid}`] = postId;\n            }\n          });\n          return this.database.ref().update(updates);\n        });\n      });\n      return Promise.all(updateOperations);\n    });\n  }\n\n  /**\n   * Returns the users which name match the given search query as a Promise.\n   */\n  searchUsers(searchString, maxResults) {\n    searchString = latinize(searchString).toLowerCase();\n    const query = this.database.ref('/people')\n        .orderByChild('_search_index/full_name').startAt(searchString)\n        .limitToFirst(maxResults).once('value');\n    const reversedQuery = this.database.ref('/people')\n        .orderByChild('_search_index/reversed_full_name').startAt(searchString)\n        .limitToFirst(maxResults).once('value');\n    return Promise.all([query, reversedQuery]).then(results => {\n      const people = {};\n      // construct people from the two search queries results.\n      results.forEach(result => result.forEach(data => {\n        people[data.key] = data.val();\n      }));\n\n      // Remove results that do not start with the search query.\n      const userIds = Object.keys(people);\n      userIds.forEach(userId => {\n        const name = people[userId]._search_index.full_name;\n        const reversedName = people[userId]._search_index.reversed_full_name;\n        if (!name.startsWith(searchString) && !reversedName.startsWith(searchString)) {\n          delete people[userId];\n        }\n      });\n      return people;\n    });\n  }\n\n  /**\n   * Saves or updates public user data in Firebase (such as image URL, display name...).\n   */\n  saveUserData(imageUrl, displayName) {\n    let searchFullName = displayName.toLowerCase();\n    let searchReversedFullName = searchFullName.split(' ').reverse().join(' ');\n    try {\n      searchFullName = latinize(searchFullName);\n      searchReversedFullName = latinize(searchReversedFullName);\n    } catch (e) {\n      console.error(e);\n    }\n\n    const updateData = {\n      profile_picture: imageUrl,\n      full_name: displayName,\n      _search_index: {\n        full_name: searchFullName,\n        reversed_full_name: searchReversedFullName\n      }\n    };\n    return this.database.ref(`people/${this.auth.currentUser.uid}`).update(updateData);\n  }\n\n  /**\n   * Fetches a single post data.\n   */\n  getPostData(postId) {\n    return this.database.ref(`/posts/${postId}`).once('value');\n  }\n\n  /**\n   * Subscribe to receive updates on a user's post like status.\n   */\n  registerToUserLike(postId, callback) {\n    // Load and listen to new Likes.\n    const likesRef = this.database.ref(`likes/${postId}/${this.auth.currentUser.uid}`);\n    likesRef.on('value', data => callback(!!data.val()));\n    this.firebaseRefs.push(likesRef);\n  }\n\n  /**\n   * Updates the like status of a post from the current user.\n   */\n  updateLike(postId, value) {\n    return this.database.ref(`likes/${postId}/${this.auth.currentUser.uid}`)\n        .set(value ? firebase.database.ServerValue.TIMESTAMP : null);\n  }\n\n  /**\n   * Adds a comment to a post.\n   */\n  addComment(postId, commentText) {\n    const commentObject = {\n      text: commentText,\n      timestamp: Date.now(),\n      author: {\n        uid: this.auth.currentUser.uid,\n        full_name: this.auth.currentUser.displayName,\n        profile_picture: this.auth.currentUser.photoURL\n      }\n    };\n    return this.database.ref(`comments/${postId}`).push(commentObject);\n  }\n\n  /**\n   * Uploads a new Picture to Firebase Storage and adds a new post referencing it.\n   * This returns a Promise which completes with the new Post ID.\n   */\n  uploadNewPic(pic, thumb, fileName, text) {\n    // Start the pic file upload to Firebase Storage.\n    const picRef = this.storage.ref(`${this.auth.currentUser.uid}/full/${Date.now()}/${fileName}`);\n    const metadata = {\n      contentType: pic.type\n    };\n    var picUploadTask = picRef.put(pic, metadata);\n    const picCompleter = new $.Deferred();\n    picUploadTask.on('state_changed', null, error => {\n      picCompleter.reject(error);\n      console.error('Error while uploading new pic', error);\n    }, () => {\n      console.log('New pic uploaded. Size:', picUploadTask.snapshot.totalBytes, 'bytes.');\n      var url = picUploadTask.snapshot.metadata.downloadURLs[0];\n      console.log('File available at', url);\n      picCompleter.resolve(url);\n    });\n\n    // Start the thumb file upload to Firebase Storage.\n    const thumbRef = this.storage.ref(`${this.auth.currentUser.uid}/thumb/${Date.now()}/${fileName}`);\n    var tumbUploadTask = thumbRef.put(thumb, metadata);\n    const thumbCompleter = new $.Deferred();\n    tumbUploadTask.on('state_changed', null, error => {\n      thumbCompleter.reject(error);\n      console.error('Error while uploading new thumb', error);\n    }, () => {\n      console.log('New thumb uploaded. Size:', tumbUploadTask.snapshot.totalBytes, 'bytes.');\n      var url = tumbUploadTask.snapshot.metadata.downloadURLs[0];\n      console.log('File available at', url);\n      thumbCompleter.resolve(url);\n    });\n\n    return Promise.all([picCompleter.promise(), thumbCompleter.promise()]).then(urls => {\n      // Once both pics and thumbanils has been uploaded add a new post in the Firebase Database and\n      // to its fanned out posts lists (user's posts and home post).\n      const newPostKey = this.database.ref('/posts').push().key;\n      const update = {};\n      update[`/posts/${newPostKey}`] = {\n        full_url: urls[0],\n        thumb_url: urls[1],\n        text: text,\n        timestamp: firebase.database.ServerValue.TIMESTAMP,\n        full_storage_uri: picRef.toString(),\n        thumb_storage_uri: thumbRef.toString(),\n        author: {\n          uid: this.auth.currentUser.uid,\n          full_name: this.auth.currentUser.displayName,\n          profile_picture: this.auth.currentUser.photoURL\n        }\n      };\n      update[`/people/${this.auth.currentUser.uid}/posts/${newPostKey}`] = true;\n      update[`/feed/${this.auth.currentUser.uid}/${newPostKey}`] = true;\n      this.database.ref().update(update).then(() => newPostKey);\n    });\n  }\n\n  /**\n   * Follow/Unfollow a user and return a promise once that's done.\n   *\n   * If the user is now followed we'll add all his posts to the home feed of the follower.\n   * If the user is now not followed anymore all his posts are removed from the follower home feed.\n   */\n  toggleFollowUser(followedUserId, follow) {\n    // Add or remove posts to the user's home feed.\n    return this.database.ref(`/people/${followedUserId}/posts`).once('value').then(\n        data => {\n          const updateData = {};\n          let lastPostId = true;\n\n          // Add followed user's posts to the home feed.\n          data.forEach(post => {\n            updateData[`/feed/${this.auth.currentUser.uid}/${post.key}`] = follow ? !!follow : null;\n            lastPostId = post.key;\n          });\n\n          // Add followed user to the 'following' list.\n          updateData[`/people/${this.auth.currentUser.uid}/following/${followedUserId}`] =\n              follow ? lastPostId : null;\n\n          // Add signed-in suer to the list of followers.\n          updateData[`/followers/${followedUserId}/${this.auth.currentUser.uid}`] =\n              follow ? !!follow : null;\n          return this.database.ref().update(updateData);\n        });\n  }\n\n  /**\n   * Listens to updates on the followed status of the given user.\n   */\n  registerToFollowStatusUpdate(userId, callback) {\n    const followStatusRef =\n        this.database.ref(`/people/${this.auth.currentUser.uid}/following/${userId}`);\n    followStatusRef.on('value', callback);\n    this.firebaseRefs.push(followStatusRef);\n  }\n\n  /**\n   * Load a single user profile information\n   */\n  loadUserProfile(uid) {\n    return this.database.ref(`/people/${uid}`).once('value');\n  }\n\n  /**\n   * Listens to updates on the likes of a post and calls the callback with likes counts.\n   * TODO: This won't scale if a user has a huge amount of likes. We need to keep track of a\n   *       likes count instead.\n   */\n  registerForLikesCount(postId, likesCallback) {\n    const likesRef = this.database.ref(`/likes/${postId}`);\n    likesRef.on('value', data => likesCallback(data.numChildren()));\n    this.firebaseRefs.push(likesRef);\n  }\n\n  /**\n   * Listens to updates on the comments of a post and calls the callback with comments counts.\n   */\n  registerForCommentsCount(postId, commentsCallback) {\n    const commentsRef = this.database.ref(`/comments/${postId}`);\n    commentsRef.on('value', data => commentsCallback(data.numChildren()));\n    this.firebaseRefs.push(commentsRef);\n  }\n\n  /**\n   * Listens to updates on the followers of a person and calls the callback with followers counts.\n   * TODO: This won't scale if a user has a huge amount of followers. We need to keep track of a\n   *       follower count instead.\n   */\n  registerForFollowersCount(uid, followersCallback) {\n    const followersRef = this.database.ref(`/followers/${uid}`);\n    followersRef.on('value', data => followersCallback(data.numChildren()));\n    this.firebaseRefs.push(followersRef);\n  }\n\n  /**\n   * Listens to updates on the followed people of a person and calls the callback with its count.\n   */\n  registerForFollowingCount(uid, followingCallback) {\n    const followingRef = this.database.ref(`/people/${uid}/following`);\n    followingRef.on('value', data => followingCallback(data.numChildren()));\n    this.firebaseRefs.push(followingRef);\n  }\n\n  /**\n   * Fetch the list of followed people's profile.\n   */\n  getFollowingProfiles(uid) {\n    return this.database.ref(`/people/${uid}/following`).once('value').then(data => {\n      if (data.val()) {\n        const followingUids = Object.keys(data.val());\n        const fetchProfileDetailsOperations = followingUids.map(\n          followingUid => this.loadUserProfile(followingUid));\n        return Promise.all(fetchProfileDetailsOperations).then(results => {\n          const profiles = {};\n          results.forEach(result => {\n            if (result.val()) {\n              profiles[result.key] = result.val();\n            }\n          });\n          return profiles;\n        });\n      }\n      return {};\n    });\n  }\n\n  /**\n   * Listens to updates on the user's posts and calls the callback with user posts counts.\n   */\n  registerForPostsCount(uid, postsCallback) {\n    const userPostsRef = this.database.ref(`/people/${uid}/posts`);\n    userPostsRef.on('value', data => postsCallback(data.numChildren()));\n    this.firebaseRefs.push(userPostsRef);\n  }\n\n  /**\n   * Deletes the given post from the global post feed and the user's post feed. Also deletes\n   * comments, likes and the file on Firebase Storage.\n   */\n  deletePost(postId, picStorageUri, thumbStorageUri) {\n    console.log(`Deleting ${postId}`);\n    const updateObj = {};\n    updateObj[`/people/${this.auth.currentUser.uid}/posts/${postId}`] = null;\n    updateObj[`/comments/${postId}`] = null;\n    updateObj[`/likes/${postId}`] = null;\n    updateObj[`/posts/${postId}`] = null;\n    updateObj[`/feed/${this.auth.currentUser.uid}/${postId}`] = null;\n    const deleteFromDatabase = this.database.ref().update(updateObj);\n    if (picStorageUri) {\n      const deletePicFromStorage = this.storage.refFromURL(picStorageUri).delete();\n      const deleteThumbFromStorage = this.storage.refFromURL(thumbStorageUri).delete();\n      return Promise.all([deleteFromDatabase, deletePicFromStorage, deleteThumbFromStorage]);\n    }\n    return deleteFromDatabase;\n  }\n\n  /**\n   * Deletes the given postId entry from the user's home feed.\n   */\n  deleteFromFeed(uri, postId) {\n    return this.database.ref(`${uri}/${postId}`).remove();\n  }\n\n  /**\n   * Listens to deletions on posts from the global feed.\n   */\n  registerForPostsDeletion(deletionCallback) {\n    const postsRef = this.database.ref(`/posts`);\n    postsRef.on('child_removed', data => deletionCallback(data.key));\n    this.firebaseRefs.push(postsRef);\n  }\n};\n\nfriendlyPix.firebase = new friendlyPix.Firebase();\n"]}