{"version":3,"sources":["../scripts/feed.js"],"names":[],"mappings":"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","file":"feed.js","sourcesContent":["/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nwindow.friendlyPix = window.friendlyPix || {};\n\n/**\n * Handles the Home and Feed UI.\n */\nfriendlyPix.Feed = class {\n\n  /**\n   * Initializes the Friendly Pix feeds.\n   * @constructor\n   */\n  constructor() {\n    // List of all posts on the page.\n    this.posts = [];\n    // Map of posts that can be displayed.\n    this.newPosts = {};\n\n    // Firebase SDK.\n    this.auth = firebase.app().auth();\n\n    $(document).ready(() => {\n      // Pointers to DOM elements.\n      this.pageFeed = $('#page-feed');\n      this.feedImageContainer = $('.fp-image-container', this.pageFeed);\n      this.noPostsMessage = $('.fp-no-posts', this.pageFeed);\n      this.nextPageButton = $('.fp-next-page-button button');\n      this.newPostsButton = $('.fp-new-posts-button button');\n\n      // Event bindings.\n      this.newPostsButton.click(() => this.showNewPosts());\n    });\n  }\n\n  /**\n   * Appends the given list of `posts`.\n   */\n  addPosts(posts) {\n    // Displays the list of posts\n    const postIds = Object.keys(posts);\n    for (let i = postIds.length - 1; i >= 0; i--) {\n      this.noPostsMessage.hide();\n      const postData = posts[postIds[i]];\n      const post = friendlyPix.post.clone();\n      this.posts.push(post);\n      const postElement = post.fillPostData(postIds[i], postData.thumb_url || postData.url,\n          postData.text, postData.author, postData.timestamp, null, null, postData.full_url);\n      // If a post with similar ID is already in the feed we replace it instead of appending.\n      const existingPostElement = $(`.fp-post-${postIds[i]}`, this.feedImageContainer);\n      if (existingPostElement.length) {\n        existingPostElement.replaceWith(postElement);\n      } else {\n        this.feedImageContainer.append(postElement.addClass(`fp-post-${postIds[i]}`));\n      }\n    }\n  }\n\n  /**\n   * Shows the \"load next page\" button and binds it the `nextPage` callback. If `nextPage` is `null`\n   * then the button is hidden.\n   */\n  toggleNextPageButton(nextPage) {\n    this.nextPageButton.unbind('click');\n    if (nextPage) {\n      const loadMorePosts = () => {\n        this.nextPageButton.prop('disabled', true);\n        console.log('Loading next page of posts.');\n        nextPage().then(data => {\n          this.addPosts(data.entries);\n          this.toggleNextPageButton(data.nextPage);\n        });\n      };\n      this.nextPageButton.show();\n      // Enable infinite Scroll.\n      friendlyPix.MaterialUtils.onEndScroll(100).then(loadMorePosts);\n      this.nextPageButton.prop('disabled', false);\n      this.nextPageButton.click(loadMorePosts);\n    } else {\n      this.nextPageButton.hide();\n    }\n  }\n\n  /**\n   * Prepends the list of new posts stored in `this.newPosts`. This happens when the user clicks on\n   * the \"Show new posts\" button.\n   */\n  showNewPosts() {\n    const newPosts = this.newPosts;\n    this.newPosts = {};\n    this.newPostsButton.hide();\n    const postKeys = Object.keys(newPosts);\n\n    for (let i = 0; i < postKeys.length; i++) {\n      this.noPostsMessage.hide();\n      const post = newPosts[postKeys[i]];\n      const postElement = friendlyPix.post.clone();\n      this.posts.push(postElement);\n      this.feedImageContainer.prepend(postElement.fillPostData(postKeys[i], post.thumb_url ||\n          post.url, post.text, post.author, post.timestamp, null, null, post.full_url));\n    }\n  }\n\n  /**\n   * Displays the general posts feed.\n   */\n  showGeneralFeed() {\n    // Clear previously displayed posts if any.\n    this.clear();\n\n    // Load initial batch of posts.\n    friendlyPix.firebase.getPosts().then(data => {\n      // Listen for new posts.\n      const latestPostId = Object.keys(data.entries)[Object.keys(data.entries).length - 1];\n      friendlyPix.firebase.subscribeToGeneralFeed(\n          (postId, postValue) => this.addNewPost(postId, postValue), latestPostId);\n\n      // Adds fetched posts and next page button if necessary.\n      this.addPosts(data.entries);\n      this.toggleNextPageButton(data.nextPage);\n    });\n\n    // Listen for posts deletions.\n    friendlyPix.firebase.registerForPostsDeletion(postId => this.onPostDeleted(postId));\n  }\n\n  /**\n   * Shows the feed showing all followed users.\n   */\n  showHomeFeed() {\n    // Clear previously displayed posts if any.\n    this.clear();\n\n    if (this.auth.currentUser) {\n      // Make sure the home feed is updated with followed users's new posts.\n      friendlyPix.firebase.updateHomeFeeds().then(() => {\n        // Load initial batch of posts.\n        friendlyPix.firebase.getHomeFeedPosts().then(data => {\n          const postIds = Object.keys(data.entries);\n          if (postIds.length === 0) {\n            this.noPostsMessage.fadeIn();\n          }\n          // Listen for new posts.\n          const latestPostId = postIds[postIds.length - 1];\n          friendlyPix.firebase.subscribeToHomeFeed(\n              (postId, postValue) => {\n                this.addNewPost(postId, postValue);\n              }, latestPostId);\n\n          // Adds fetched posts and next page button if necessary.\n          this.addPosts(data.entries);\n          this.toggleNextPageButton(data.nextPage);\n        });\n\n        // Add new posts from followers live.\n        friendlyPix.firebase.startHomeFeedLiveUpdaters();\n\n        // Listen for posts deletions.\n        friendlyPix.firebase.registerForPostsDeletion(postId => this.onPostDeleted(postId));\n      });\n    }\n  }\n\n  /**\n   * Triggered when a post has been deleted.\n   */\n  onPostDeleted(postId) {\n    // Potentially remove post from in-memory new post list.\n    if (this.newPosts[postId]) {\n      delete this.newPosts[postId];\n      const nbNewPosts = Object.keys(this.newPosts).length;\n      this.newPostsButton.text(`Display ${nbNewPosts} new posts`);\n      if (nbNewPosts === 0) {\n        this.newPostsButton.hide();\n      }\n    }\n\n    // Potentially delete from the UI.\n    $(`.fp-post-${postId}`, this.pageFeed).remove();\n  }\n\n  /**\n   * Adds a new post to display in the queue.\n   */\n  addNewPost(postId, postValue) {\n    this.newPosts[postId] = postValue;\n    this.newPostsButton.text(`Display ${Object.keys(this.newPosts).length} new posts`);\n    this.newPostsButton.show();\n  }\n\n  /**\n   * Clears the UI.\n   */\n  clear() {\n    // Delete the existing posts if any.\n    $('.fp-post', this.feedImageContainer).remove();\n\n    // Hides the \"next page\" and \"new posts\" buttons.\n    this.nextPageButton.hide();\n    this.newPostsButton.hide();\n\n    // Remove any click listener on the next page button.\n    this.nextPageButton.unbind('click');\n\n    // Stops then infinite scrolling listeners.\n    friendlyPix.MaterialUtils.stopOnEndScrolls();\n\n    // Clears the list of upcoming posts to display.\n    this.newPosts = {};\n\n    // Displays the help message for empty feeds.\n    this.noPostsMessage.hide();\n\n    // Remove Firebase listeners.\n    friendlyPix.firebase.cancelAllSubscriptions();\n\n    // Stops all timers if any.\n    this.posts.forEach(post => post.clear());\n    this.posts = [];\n  }\n};\n\nfriendlyPix.feed = new friendlyPix.Feed();\n"]}